<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-01T00:10:07+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Aitor | Ciberseguridad y Hacking Ético</title><subtitle>Artículos sobre ciberseguridad, CTF y desarrollo web</subtitle><author><name>Aitorgg02</name></author><entry><title type="html">DOM XSS in document.write sink using source location.search – PortSwigger Write Up</title><link href="http://localhost:4000/dom-xss-document.write-sink/" rel="alternate" type="text/html" title="DOM XSS in document.write sink using source location.search – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/dom-xss-document.write-sink</id><content type="html" xml:base="http://localhost:4000/dom-xss-document.write-sink/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio: “DOM XSS in document.write sink using source location.search”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cuando abrimos el lab, lo primero que nos encontramos es la siguiente web:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hay una barra de búsqueda, por lo que vamos a probar a simplemente buscar algo:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cuando hacemos la búsqueda, si damos click derecho y vemos el código fuente del elemento de la palabra por la que hemos buscado, podremos ver que se sitúa en el atributo src de una imagen.&lt;/p&gt;

&lt;p&gt;Observando el como se implementa nuestro input en el código fuente, podemos enviar un payload especializado que se escape del tag &lt;img /&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo vamos a usar:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &quot;&amp;gt;&amp;lt;script&amp;gt;alert(”XSS”)&amp;lt;/script&amp;gt;//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cuando hemos escrito nuestro payload, simplemente volvemos a hacer una búsqueda:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y como vemos, se nos ejecuta el código que hemos introducido. El código fuente se vería ahora de la siguiente forma:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/7.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como vemos, nuestro input ya no se encuentra dentro del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, ya que hemos conseguido cerrar el elemento para escribir código JavaScript.&lt;/p&gt;

&lt;p&gt;Con esto hecho, conseguimos resolver el laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_document.write_sink_using_source/8.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio: “DOM XSS in document.write sink using source location.search”:</summary></entry><entry><title type="html">DOM XSS in jQuery anchor href attribute sink using location.search source – PortSwigger Write Up</title><link href="http://localhost:4000/dom-xss-jquery-href-attribute-sink-using-location/" rel="alternate" type="text/html" title="DOM XSS in jQuery anchor href attribute sink using location.search source – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/dom-xss-jquery-href-attribute-sink-using-location</id><content type="html" xml:base="http://localhost:4000/dom-xss-jquery-href-attribute-sink-using-location/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio: “DOM XSS in jQuery anchor href attribute sink using location.search source”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En este caso, para resolver el laboratorio tenemos que ejecutar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert&lt;/code&gt; que nos devuelva las cookies.&lt;/p&gt;

&lt;p&gt;Lo primero de todo es acceder al laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Una vez accedidos, nos dirigimos a la parte de enviar feedback, ya que, en el enunciado es donde se nos indica que se encuentra el XSS:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cuando accedemos, si nos fijamos en la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;, podemos ver que de forma por defecto se nos añade el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnPath&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a probar a añadirle cualquier valor al parámetro:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En principio no pasa nada, pero si ponemos el ratón encima del hiperenlace de “Back”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/7.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vemos como el valor que hemos colocado en la variable, se implemente en el atributo href de este elemento. Por lo que es tan sencillo como colocar un payload que nos ejecute el alert cuando demos click en el botón:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ javascript:alert(document.cookie)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/8.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como vemos, conseguimos resolver el laboratorio, y desde el punto de vista del código fuente, lo que hemos conseguido es lo siguiente:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/9.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ahora, si damos click en el hiperenlace “Back”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/10.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Se nos ejecutará el código Javascript que hemos indicado:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_in_jquery_ anchor_href_attribute_sink_using_location.search_source/11.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio: “DOM XSS in jQuery anchor href attribute sink using location.search source”:</summary></entry><entry><title type="html">DOM XSS in jQuery selector sink using a hashchange event – PortSwigger Write Up</title><link href="http://localhost:4000/dom-xss-jquery-selector-sink-hashchange-event/" rel="alternate" type="text/html" title="DOM XSS in jQuery selector sink using a hashchange event – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/dom-xss-jquery-selector-sink-hashchange-event</id><content type="html" xml:base="http://localhost:4000/dom-xss-jquery-selector-sink-hashchange-event/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio: “DOM XSS in jQuery selector sink using a hashchange event”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Para resolver el laboratorio, tenemos que enviar a una víctima un exploit que aproveche la vulnerabilidad del laboratorio para ejecutar la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lo primero de todo es acceder al laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En este caso, no vemos ninguna barra de búsqueda o página de feedback como ha ocurrido en otros retos de XSS. Sin embargo, si nos vamos al código fuente, nos encontramos con el siguiente trozo de código:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Este código, básicamente lo que hace es que cuando se especifica en la URL algo después de un hashtag, busca este valor en la web y hace un scroll hasta la coincidencia.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si nos vamos abajo del todo del laboratorio, podemos ver como hay un post que tiene la palabra “Resume” en el título:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sabiendo esto, vamos a buscar por:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &amp;lt;URL&amp;gt;/#Resume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Damos enter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y aunque en la imagen no se pueda apreciar, nos redirige automáticamente hacia el post que contiene la palabra.&lt;/p&gt;

&lt;p&gt;Para ver como explotar esto, vamos a traer el código de nuevo:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/7.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos observar, realmente lo que ocurre en el código, es que cuando especificamos algo después del hashtag, jQuery intenta busca un elemento h2 que contenga lo que hemos dicho. Cuando encuentra el elemento, este se almacena en la variable post, por lo que ahora, lo que contiene es un elemento de jQuery que se ve de la siguiente forma:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/8.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, si la variable post tiene algun dato almacenado, se obtiene el primer elemento del objeto jQuery y se usa el método scrollIntoView().&lt;/p&gt;

&lt;p&gt;Aqui la vulnerabilidad como tal, se encuentra en la primera linea, en el selector sink de jQuery &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;($())&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/9.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/10.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Si no se sanitiza bien, lo que ocurre en aproximadamente en el código es lo siguiente:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$(‘section.blog-list h2:contains(‘ + decodeURIComponent(window.location.hash.slice(1)) + ‘)’);&lt;/li&gt;
  &lt;li&gt;$(‘section.blog-list h2:contains(‘ + Hola + ‘)’);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por lo tanto, si ponemos un payload como el siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &amp;lt;img src=/ onerror=print()&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mas o menos, ocurriría algo así:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$(‘section.blog-list h2:contains(‘ + &amp;lt;img src=/ onerror=print()&amp;gt; + ‘)’);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De esta forma, se interpretaría. Vamos a probarlo:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/11.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Damos enter:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/12.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y efectivamente se ejecuta. Ahora tenemos que crear un exploit que mandemos a la víctima y se haga uso de esta vulnerabilidad. Para ello nos vamos al servidor del exploit:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/13.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/14.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En este caso, la idea es automatizar la explotación usando un simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/15.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Antes de enviarlo vamos a ver como se vería:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/16.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/17.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;La victima al visitar una web con nuestro código, vería lo que estamos viendo, un pequeño iframe de la web, e inmediatamente después de que cargase la web, se ejecutaría la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;función print()&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/18.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Por lo que, viendo que funciona. Simplemente lo guardamos y lo enviamos a la víctima:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/19.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/20.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;De esta forma, conseguimos resolver el laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/21.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_jquery_selector_sink_haschange_event/22.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio: “DOM XSS in jQuery selector sink using a hashchange event”:</summary></entry><entry><title type="html">DOM XSS in innerHTML sink using source location.search – PortSwigger Write Up</title><link href="http://localhost:4000/dom-xss-sink-using-location-search/" rel="alternate" type="text/html" title="DOM XSS in innerHTML sink using source location.search – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/dom-xss-sink-using-location-search</id><content type="html" xml:base="http://localhost:4000/dom-xss-sink-using-location-search/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio: “DOM XSS in innerHTML sink using source location.search”:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Lo primero de todo como siempre es acceder al laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Una vez accedido, vemos una barra de búsqueda. Por lo que vamos a buscar cualquier cosa:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Si nos fijamos, lo que hemos buscado se ve reflejado en la web. Y si damos click derecho y vemos la parte del código fuente donde se situa, vemos que se almacena en el innerHTML del tag &lt;span&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por lo que conociendo esto, podemos intentar usar en la búsqueda un payload especialmente diseñado para escaparnos de este tag, y ejecutar código Javascript. Por ejemplo, usaremos el siguiente payload:&lt;/p&gt;

&lt;p&gt;Por ejemplo vamos a usar:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &amp;lt;/span&amp;gt;&amp;lt;img src=/ onerror=alert(1) /&amp;gt;//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Al buscar por él, podemos ver como se nos ejecuta con éxito el payload. Hemos pasado de:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &amp;lt;span id=”searchMessage”&amp;gt;hola&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;a esto:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ &amp;lt;span id=”searchMessage”&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;img src=/ onerror=alert(1) /&amp;gt;//&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/dom_xss_innerhtml_sink_using_source_location.search/7.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio: “DOM XSS in innerHTML sink using source location.search”:</summary></entry><entry><title type="html">Reflected XSS into HTML context with nothing encoded – PortSwigger Write Up</title><link href="http://localhost:4000/reflected-xss-into-html/" rel="alternate" type="text/html" title="Reflected XSS into HTML context with nothing encoded – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/reflected-xss-into-html</id><content type="html" xml:base="http://localhost:4000/reflected-xss-into-html/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio de PortSwigger: “Reflected XSS into HTML context with nothing encoded.”&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Para resolver el laboratorio tenemos que realizar un Cross-site-Scripting (XSS) que llame a una función alert.&lt;/p&gt;

&lt;p&gt;Cuando entramos en el laboratorio, vemos un campo de búsqueda:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a probar a buscar cualquier cosa:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos observar en la siguiente imagen en la &lt;strong&gt;URL&lt;/strong&gt;, hemos buscado &lt;strong&gt;hola&lt;/strong&gt; para ver que nos responde la web.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Si nos fijamos, el término de búsqueda se ve reflejado en la web. Por lo que, podemos probar a meter un código Javascript usando el atributo onerror en el tag &lt;img /&gt;.&lt;/p&gt;

&lt;p&gt;De tal forma, que si falla al cargar la imagen que especificamos en el atributo src, se nos ejecutará lo que escribimos en onerror:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laboratorio resuelto&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/xss_into_html_context_with_nothing_encoded/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio de PortSwigger: “Reflected XSS into HTML context with nothing encoded.</summary></entry><entry><title type="html">Stored XSS into HTML context with nothing encoded – PortSwigger Write Up</title><link href="http://localhost:4000/stored-xss-into-html/" rel="alternate" type="text/html" title="Stored XSS into HTML context with nothing encoded – PortSwigger Write Up" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/stored-xss-into-html</id><content type="html" xml:base="http://localhost:4000/stored-xss-into-html/">&lt;p&gt;En este post vamos a estar resolviendo el laboratorio de PortSwigger: “Stored XSS into HTML context with nothing encoded.”&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/1.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Para resolver el laboratorio tenemos que realizar un Cross-site-Scripting (XSS) que llame a una &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;función alert&lt;/code&gt; en un comentario de una publicación.&lt;/p&gt;

&lt;p&gt;Cuando entramos en el laboratorio lo primero que tenemos que hacer es dirigirnos a un post cualquiera.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/2.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dentro del post, encontramos lo siguiente:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/3.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver tenemos la opción de dejar un comentario, y distintos campos a rellenar.&lt;/p&gt;

&lt;p&gt;Por lo que nosotros simplemente vamos a hacerle caso, y vamos a rellenar todos los campos, eso si, en el campo del comentario, colocaremos un pequeño código JavaScript que nos ejecute un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/4.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Con todos los campos rellenados, simplemente enviamos el comentario y habremos resuelto el laboratorio:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/5.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Para ver que ha ocurrido, vamos a volver al post done hemos escrito nuestro comentario:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/6.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/7.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y como vemos, al entrar en el post, se nos ejecuta el código que habíamos escrito en el campo de comentario. Acabamos de explotar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stored XSS&lt;/code&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;/assets/images/portswigger/stored_xss_into_html_context_with_nothing_encoded/8.png&quot; width=&quot;1000&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;¡Un saludo y espero que os sirva de apoyo!&lt;/p&gt;</content><author><name>Aitorgg02</name></author><category term="Burpsuite" /><category term="JavaScript" /><category term="XSS" /><summary type="html">En este post vamos a estar resolviendo el laboratorio de PortSwigger: “Stored XSS into HTML context with nothing encoded.</summary></entry></feed>